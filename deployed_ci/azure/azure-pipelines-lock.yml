trigger: none
pr: none

variables:
  archive_url: ${ROMP_ARCHIVE_URL}
  command: ${ROMP_COMMAND}
  environments: ${ROMP_ENVIRONMENTS}
  artifact_paths: ${ROMP_ARTIFACT_PATHS}

jobs:
  - job: generate_matrix
    displayName: Generate matrix
    steps:
      - bash: |
          python src/romp/_matrix.py --environments ${ROMP_ENVIRONMENTS}
        name: generate_matrix
        env:
          ROMP_ENVIRONMENTS: $(ROMP_ENVIRONMENTS)

  - job: get_input_archive
    displayName: Get input archive
    steps:
      - bash: |
          if [[ -z "$(archive_url)" ]]; then tar -cvzf input.tar.gz --files-from /dev/null; else curl --silent --show-error "$(archive_url)" --output input.tar.gz; fi
        displayName: Get input archive
      - task: PublishPipelineArtifact@0
        inputs:
          artifactName: 'input'
          targetPath: '$(System.DefaultWorkingDirectory)/input.tar.gz'
      - bash: |
          touch __filler__
        displayName: Create __filler__
      - task: CopyFiles@2
        inputs:
          contents: '__filler__'
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: coalesce

  - job: romp_on
    displayName: romp on
    dependsOn:
      - generate_matrix
      - get_input_archive
    pool:
      vmImage: $[ variables.vmImage ]
    strategy:
      matrix: $[ dependencies.generate_matrix.outputs['generate_matrix.JobsToRun'] ]
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(versionSpec)
          architecture: $(architecture)
      - task: DownloadPipelineArtifact@0
        inputs:
          artifactName: 'input'
          targetPath: $(System.DefaultWorkingDirectory)
      - bash: |
          mkdir work
          cd work
          tar --extract --verbose --file ../input.tar.gz
        displayName: Extract input
      - bash: |
          python -c 'import sys; print(sys.version); print(sys.platform)'
        displayName: Report Python version
      - bash: |
          cd work
          eval $(command)
        displayName: Run Command
        env:
          UUID: $[ variables.uuid ]
      - bash: |
          cd work
          tar --create --verbose --gzip --file ../${ARTIFACTS_ARCHIVE} ${ROMP_ARTIFACT_PATHS}
        displayName: Collect artifacts
        condition: ne(variables.ROMP_ARTIFACT_PATHS, '')
        env:
          ROMP_ARTIFACT_PATHS: $(ROMP_ARTIFACT_PATHS)
          UUID: $[ variables.uuid ]
          ARTIFACTS_ARCHIVE: $[ variables.artifacts_archive ]
      - task: CopyFiles@2
        inputs:
          contents: 'artifacts.*.tar.gz'
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: coalesce

  - job: coalesce_artifacts
    displayName: Coalesce artifacts
    dependsOn: romp_on
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.9
          architecture: x64
      - task: DownloadBuildArtifacts@0
        inputs:
          artifactName: 'coalesce'
          downloadPath: $(System.DefaultWorkingDirectory)
      - bash: |
          python deployed_ci/azure/coalesce_artifacts.py --source-directory coalesce --target artifacts.tar.gz
        displayName: Build archive
      - task: CopyFiles@2
        inputs:
          contents: 'artifacts.tar.gz'
          targetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: artifacts
